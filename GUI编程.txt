GUI的东西应该会很难。它甚至可以塑造性格。

这里主要使用的GUI工具包是Python默认的GUI库Tk通过Python的接口tkinter可以访问Tk。

    Tk并不是最新最好的，也没有包含最强大的GUI构建模块集，但它足够易用，你可以使用它构建能够运行在大多数平台下的GUI。
    Tkinter 是Python 的默认GUI库。它基于Tk工具包，该工具包最初是为工具命令语言（Tool Command Language，tcl）设计的。Tkinter可以提供一种高效而又令人兴奋的方式创建有趣的应用，而如果直接使用C/C++的原生窗体系统库进行编程则会花费较长的时间。一旦设计好应用程序及其外观，就可以使用控件（widget）的基础构建块来拼凑出你想要的东西最后再添加功能使其真实可用。
    依然可以使用python的系统访问、网络操作、XML、数值与可视化处理、数据库访问、所有其他标准库和第三方扩展模块。
    
    tkinter 模块：添加Tk到应用中：
    让GUI程序启动和运行起来需要5个主要步骤：
    1）导入tkinter模块（或from tkinter import *）
    2）创建一个顶层窗口对象，用于容纳整个GUI应用。
    3）在顶层窗口对象上（或者“其中”）构建所有的GUI组件（及其功能）。
    4）通过底层的应用代码将这些GUI组件连接起来
    5）进入主事件循环
    
    窗口和控件：
    在GUI编程中，顶层的根窗口对象包含组成GUI应用的所有小窗口对象。它们可能是文字标签、按钮、列表框等。这些独立的GUI组件称为控件。所以当创建一个顶层窗口时，只是表示需要一个地方来摆放这些控件。
    top = tkinter.Tk() --返回的对象通常称为根窗口，这也是一些应用使用root 而不是 top来指代它的原因。顶层窗口是那些在应用中独立显示的部分。GUI程序中可以有多个顶层窗口，但是其中只有一个是根窗口。可以选择把控件全部设计好，再添加功能；也可以边设计控件边添加功能。
    控件可以单独存在也可以作为容器存在。如果一个控件包含其他控件，就可以将其认为是那些控件的父控件。相应地，如果一个控件被其他控件包含，则将其认为是那个控件的子控件，而父控件就是下一个直接包围它的容器控件。
    通常，控件有一些行为，比如按下按钮、将文本写入文本框等。这些用户行为称为事件，而GUI对这类事件的相应称为回调。
    
    事件驱动处理：
    事件可以包括按钮按下（及释放）、鼠标移动、敲击回车键等。一个GUI应用从开始到结束就是通过整套事件驱动体系来驱动的。这种方式称为事件驱动处理。
        事件驱动的GUI事件本质上非常适合于客户端/服务器端架构。当启动一个GUI应用时，需要一些启动步骤来准备核心部分的执行，就像网络服务器启动时必须先分配套接字并将其绑定到本地地址上一样。GUI应用必须先创建所有的GUI组件，然后将它们绘制在屏幕上。这是布局管理器的职责所在。当布局管理器排列好所有控件后，GUI应用进入其类似服务器的无限循环。这个循环会一直运行，知道出现GUI事件，进行处理，然后再等待更多的事件去处理。
        
    布局管理器：
    Tk有3种布局管理器来帮助控件集进行定位。最原始的一种称为Placer。它的做法非常直接：你提供控件的大小和摆放位置，然后管理器就会将其摆放好。问题是必须对所有控件进行这些操作，这样就会加重编程开发者的负担，因为这些操作本应该是自动完成的。
    第二种布局管理器是主要使用的，叫做Packer，这个命名相当恰当，因为它会把控件填充到正确的位置（即使指定的父控件中），然后对于之后的每个控件，会去寻找剩余的控件进行填充。这个处理很像是旅行时往行李箱中填充行李的过程。
    第三种布局管理器是Grid。你可以基于网格坐标，使用Grid来指定GUI控件的放置。Grid会在它们的网格位上渲染GUI应用中的每个对象。
    
    一旦Packer确定好所有控件大小和对齐方式，它就会在屏幕上将其放置妥当。当所有控件放置好后，进入无限循环中。tkinter.mainloop()
    一般是程序的最后一段代码。当进入主循环后，GUI就从这里开始接管程序的执行。所有其他行为都会通过回调来处理，甚至包括退出应用。
    
    顶层窗口：tkinter.Tk()在这个窗口中，可以放置独立的控件，也可以将多个组件凑在一起来构成GUI程序。
    Tk控件：
    Button 与Label相似，但提供额外的功能，如鼠标悬浮，按下，释放以及键盘活动/事件
    Canvas 提供绘制形状的功能(线段、椭圆、多边形、矩形)，可以包含图像或位图
    Checkbutton 一组选框，可以勾选其中任意一个
    Entry 单行文本框，用于收集键盘输入
    Frame 包含其他控件的纯容器
    Label 用于包含文本和图像
    LabelFrame 标签和框架的组合，拥有额外的标签属性
    Listbox 给用户显示一个选项列表来进行选择
    Menu 按下Menubutton 后弹出的选项列表，用户可以从中选择
    Menubutton 用于包含菜单（下拉，级联等）
    Message 消息。与Label类似，不过可以显示成多行
    PanedWindow 一个可以控制其他控件在其中摆放的容器控件
    Radiobutton 一组按钮，其中只有一个可以“按下”
    Scale 线性滑块控件，根据已设定的起始值和终止值，给出当前设定的精确值
    Scrollbar 为Text、Canvas、Listbox、Enter 等支持的控件提供滚动功能
    Spinbox Entry和Button 的组合，允许对值进行调整
    Text 多行文本框，用于收集（或显示）用户输入的文本
    Toplevel 与Frame类似，不过它提供了一个单独的窗口容器。
    
    偏函数应用：
    使用偏函数，可以通过有效地“冻结”那些预先确定的参数来缓存函数参数，然后在运行时，当获得需要的剩余参数后，可以将其解冻，传递到最终的参数中，从而使最终确定的所有参数去调用函数。
    偏函数最好的一点是它不只局限于函数。偏函数可以用于可调对象（任何包括函数接口的对象），只需要通过使用括号即可，包括类、方法或可调用实例。对于有很多可调用对象，并且许多调用都反复使用相同参数的情况，使用偏函数会非常合适。
    GUI编程是一个很好的偏函数用例，因为你很可能需要GUI控件外观上具有某种一致性，而这种一致性来自于使用相同参数创建相似对象时。我们现在要实现一个应用，在这个应用中有很多按钮拥有相同的前景色和背景色。对于这种只有细微差别的按钮，每次都使用相同的参数创建相同的实例简直是一种浪费；前背景色都是相同的，只有文本有一点不同。
    实例：路标偏函数（5.3.5）
    中级tkinter 实例（5.3.6）这个应用是一个目录遍历工具。它会从当前目录开始，提供一个文件列表。双击列表中任意其他目录，就会使得工具切换到新目录中，用新目录的文件列表代替旧文件列表。
    
    其他GUI简介：
    python4个流行的工具包:Tix（Tk接口拓展），Pmw、wxPython以及PyGTK。
    Tix模块已经包含在Python标准库中了，而其他几个则是第三方模块，需要自行下载。因为Pmw只是Tkinter的一个拓展，所以它是最容易安装的（只需要解压到sitepackages）文件夹即可。WxPython与PyGTK涉及多个文件的下载和编译（除非选择win32版本有二进制安装包）。一旦工具包安装并得到验证，就可以开始了。除了Label和Button外，这里还会介绍Control（即SpinButton）和ComboBox。Control控件由一个文本控件和一组靠近的箭头组成，文本控件中的值可以被附近的一组箭头按钮“控制”或“上下调整”。ComboBox控件通常是由一个文本控件和一个下拉选项菜单组成的，列表中当前选定的条目会显示在文本控件中。
    
    python3 中导入tix：from tkinter.tix import Tk,Control,ComboBox
    python3 中导入ttk：from tkinter.ttk import Style,Label,Button,Combobox
    Style().configure('TButton',foreground='white',background='red')
    
    py2 与 py3 中tkinter 的变化：
    Tkinter  ---> tkinter
    tkMessageBox ---> tkinter.messagebox
    tkColorChooser ---> tkinter.filedialog
    tkCommonDialog ---> tkinter.commondialog
    tkSimpleDialog ---> tkinter.simpledialog
    tkFont ---> tkinter.font
    Tkdnd ---> tkinter.dnd
    ScrolledText ---> tkinter.scrolledtext
    Tix ---> tkinter.tix
    Ttk ---> tkinter.ttk
    
    