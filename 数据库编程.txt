文件或简单持久化存储可以满足一些小应用的需求，而大型服务器或高数据容量的应用则需要更加成熟的数据库系统。--关心型数据库、非关系型数据库以及对象关系映射ORM。

持久化存储：
    任何应用都需要持久化存储。一般有3种基础的存储机制：文件、数据库系统以及一些混合类型。这种混合类型包括现有系统上的API、ORM、文件管理器、电子表格、配置文件等。当文件或创建的数据存储系统不使用于大项目时，需要转而使用数据库。
    底层存储：
    数据库通常使用文件系统作为基本的持久化存储，它可以是普通的操作系统文件、专用的操作系统，甚至是原始的磁盘分区。
    用户接口：
    大多数数据库系统提供了命令行工具，可以用其执行SQL语句或查询。此外还有一些GUI工具，使用命令行的客户端或数据库客户端库，向用户提供更加便捷的界面。
    数据库
    一个关系数据库管理系统（RDBMS）通常可以管理多个数据库，比如销售、市场、用户支持等，都可以在同一个服务端（如果RDBMS基于服务器，可以这样。不过一些简单的系统通常不是基于服务器的）。MySQL是一种基于服务的RDBMS，因为它是一个服务器进程始终运行以等待命令行输入;而SQLite 和 Gadfly则不会运行服务器。
    组件
    数据库存储可以抽象为一张表。每行数据都有一些字段对应于数据库的列。每一列的表定义的集合以及每个表的数据类型放到一起定义了数据库模式（schema）。
    数据库可以创建（create）和删除（drop），表也一样。插入新数据（insert），修改表中已有的数据（update），而移除表中的行（delete）。这些都被叫做数据库命令或操作。使用可选的条件请求获取数据库中的行称为Query。一个数据库使用游标的概念来提交SQL命令、查询以及获取结果。
    SQL
    数据库命令和查询操作是通过SQL语句提交给数据库的。虽然并非所有数据库都使用SQL语句，但是大多数关系数据库使用，大部分数据库都是不区分大小写的，尤其是针对数据库命令而言。
    创建数据库：
    CREATE DTABASE test; --创建一个test数据库，假设是管理员权限
    GRANT ALL ON test.* to user(s); --给指定用户（或所有用户）提升权限，以便用户可以操作数据库
    
    使用数据库
    USE test; ---指定需要使用数据库test
    删除数据库
    DROP DATABASE test;--可以删除整个数据库test，包括其中的表和数据
    创建表
    CREATE TABLE users (login VARCHAR(8) ,userid INT,projid INT); --创建一张表，其中login为字符串，userid 和 projid为整数型
    删除表
    DROP TABLE users; --删除一张表，并清空其中数据
    
    插入行：
    INSERT INTO users VLAUES('lenana',21111,1)
    更新行：
    UPDATE users SET projid = 4 where projid = 2
    删除行：
    DELETE FROM users where projid = %d
    
    数据库和python：
    DB-API 是阐明一系列所需对象和数据库访问机制的标准，它可以为不同的数据库适配器和底层数据库系统提供一致性访问。
    模块属性：DB-API标准要求必须定义全局兼容属性。
    DB-API属性
    apilevel  需要适配器兼容的DB-API版本
    threadsafety 本模块的线程安全级别
    paramstyle   本模块的SQL语句参数风格
    connect()    Connect() 函数
    
    数据属性
    apilevel 是字符串属性，不是浮点型，默认1.0
    threadsafety 是一个整型值，0 不支持线程安全，1  最小化线程安全  2 适度的线程安全支持  3 完整的线程安全支持
    
    参数风格：
    DB-API 支持以不同的方式指明如何将参数与SQL语句整合，并最终传递给服务器中执行。
    数据库表参数风格：
    numeric 数值位置风格 WHERE name=:1
    named   命名风格     WHERE name=:name
    pyformat Python字典printf()格式转换  where name=%(name)s
    qmark 问号风格       where name=?
    format ANSIC 的printf()格式转换 where name = %s
    
    函数属性：
    connect() 函数通过Connection 对象访问数据库。兼容模块必须实现connect()函数，该函数创建并返回一个Connection对象
    connect(user_name,pwd,tns)
    connect()函数属性
    user 用户名  password 密码  host 主机名 database  数据库名  dsn  数据源名
    使用DSN还是单独独立参数主要基于所连接的系统。
    并不是所有的适配器都会严格按照标准实现：
    MySQLdb.connect(host='',db='',user='',pwd='')
    
    异常兼容模块：
    Warning 警告异常基类
    Error  错误异常基类
        InterfaceError  数据接口错误
        DatabaseError   数据库错误
        DataError       处理数据时出现问题
        OperationError  数据库操作执行期间出现错误
        IntegrityError  数据库内部错误
        ProgrammingError SQL命令执行失败
        NotSupportedError 出现不支持的操作
        
    Connection 对象
    应用数据库之间进行通信需要建立数据库连接。它是最基本的机制，只有通过数据库连接才能把命令传递到服务器，并得到返回的结果。当一个连接（或一个连接池）建立后，可以创建一个游标，向数据库发送请求，然后从数据库中接收回应。
    Connection对象方法
    Connection对象不需要包含任何数据属性，但应当包含如下方法：
    close() #关闭连接
    commit() #提交事务
    rollback() #回滚事务
    cursor()   #使用该连接创建（并返回）一个游标或类游标的对象
    errorhandler(cxn,cur,errcls,errval) 作为给定连接的游标的处理程序
    
    Cursor对象
    当建立连接后，就可以和数据库进行通信了，游标可以让用户提交数据库命令，并获取查询的结果行。
    连接之后用Connection对象创建游标对象，connection.cursor()
    游标对象最重要的属性是execute*()和fetch*()方法，所有针对数据库的服务请求都是通过它们执行的，arraysize数据属性在为fetchmany()设置默认大小时非常有用。当然在不需要时关闭游标是一个好主意，而如果数据库支持存储过程，可能会用到callproc()
    Cursor对象属性
    arraysize   使用fetchall()方法时，一次取出的结果行数，默认是1
    connection  创建此游标的连接
    description 返回游标活动状态
    lastrowid   上次修改的行ID（可选如果不支持ID，返回none）
    rowcount    上次execute*()方法处理或影响额行数
    callproc(func[,args])  调用存储过程
    close()      关闭游标
    execute(op[,args])   执行数据库查询或命令
    executemany(op,args)  类似execute()和map()的结合，为给定的所有参数准备并执行数据库查询或命令
    fecchone()  获取查询结果的下一行
    fetchall()  获取查询结果的所有（剩余）行
    fetchmany([size=cursor.arraysize])  获取查询结果下面的size行
    __iter__() 为游标创建迭代器对象（可选，参考next()）
    messages    游标执行后从数据库中获得的消息列表（元组集合，可选）
    next()      被迭代器用于获取查询结果的下一行（可选，类似fetchone()）
    nextset()   移动到下一个结果集（如果支持的话）
    rownumber   当前结果集中游标的索引（以行为单位，从0开始，可选）
    setinputsizes(sizes)  设置允许的最大输入大小（必须有，但是实现是可选的）
    setoutputsizes(size[,col])   
    
    类型对象和构造函数
    Date(yr,mo,dy)                      日期值对象
    Time(hr,min,sec)                    时间值对象
    Timestamp(yr,mo,dy,hr,min,sec)      时间戳对象
    DateFromTicks(ticks)                日期对象，给出从新纪元时间1970 1 1 00:00:00 以来的秒数
    TimeFromTicks(ticks)                时间对象，给出从新纪元时间1970 1 1 00:00:00 以来的秒数
    TimestampFromTicks(ticks)           时间戳对象，给出从新纪元时间1970 1 1 00:00:00 以来的秒数
    Binary(string)                      对应二进制（长）字符串对象
    STRING                              表示基于字符串列的对象，比如VARCHAR
    BINARY                              表示（长）二进制对象，比如RAW，BLOB
    NUMBER                              表示数值对象
    DATETIME                            表示日期/时间列的对象
    ROWID                               表示“行ID”的对象
    
    非关系型数据库
    非关系型数据库就有对象数据库、键值对存储、文档存储（或者数据存储）、图形数据库、表格数据库、列/可扩展记录/宽列数据库、多值数据库等很多种类。
    MongoDB
    介于简单的键值对存储于列存储之间。有点像关系数据库的无模式衍生品，比基于列的存储更简单、约束更少，但是比普通的键值对存储更加灵活。一般情况下其数据会另存为JSON对象，并且允许诸如字符串、数值、列表甚至嵌套等数据类型。
    MongoDB将数据存储于其特殊的JSON串中，可以将其想象为一个Python字典，由于它是一个二进制编码的序列，因此通常也会称其为BSON格式。
    
    PyMongo:MongoDB 和 Python
    尽管Python中有很多MongoDB驱动程序，不过其中最正式的一个是PyMongo。
    mongodb.org上下载MongoDB，通过easy_install 或者pip 安装PyMOngo3， import pymongo